
#import "Net"
#import "Logger"
#import "OS"
#import "Threads"
#import "backend"
#import "HTTP"

struct Session {
    server: HTTPServer*;
    job_system: JobSystem*;
    
    fn save() {
        job_system.save_to_file("data/endercompute.dat")
    }
}

fn start_webserver() {
    port: i32 = 8080
    
    session: Session;
    session.job_system = InitJobSystem("data")
    
    session.server = StartHTTPServer(port, handle_event, &session)
    if session.server {
        log("Started server at port ",port)
        session.server.wait()
    }
    
    fn handle_event(request: HTTPRequest*, e: Event, user_data: void*) {
        session := cast<Session*>user_data
        server := session.server
        
        path := request.route
        content := request.content
        
        if !IsPathSanitized(path) {
            // log("path is not safe")
            return;
        }
        fn empty(s: char[]*) -> char[] {
            if s
                return *s
            return {}
        }
        if path == "/api/create" {
            fields_loop := split("\n", content)
            defer fields_loop.cleanup()
            name: char[]
            desc: char[]
            for fields_loop.sliced() {
                mini_fields := split("=", it)
                defer mini_fields.cleanup()
                
                if mini_fields.size() != 2
                    continue
                
                key := mini_fields[0]
                val := mini_fields[1]
                if key == "name"
                    name = val
                else if key == "desc"
                    desc = val
            }
            
            // log("content:\n", content)
            // log("name:", name)
            // log("desc:", desc)
            
            // TODO: Check if name or desc is empty
            session.job_system.create_job(name, desc)
            
            server.send(200, {}, e.who)
            return;
        } else if path == "/api/get" {
            // TODO: check if parse failed
            
            str_id := empty(request.queries.find("id"))
            id: i32 = parse_i64(str_id)
            
            job := session.job_system.find_job(id)
            
            if !job {
                server.send(404, {}, e.who)
                return;
            }
            
            data: StringBuilder
            defer data.cleanup()
            
            data.append("{")
            
            #macro FIELD(K,V)
            data.append("\"")
            data.append(K)
            data.append("\":")
            data.append(V)
            // data.append(",")
            #endmacro
            #macro FIELD_S(K,V)
            data.append("\"")
            data.append(K)
            data.append("\":")
            data.append("\"")
            data.append(V)
            data.append("\"")
            // data.append(",")
            #endmacro
            
                                FIELD_S("name"         , job.name)
            data.append(",")   FIELD("id"           , job.id)
            data.append(",") FIELD_S("description"  , job.description)
            data.append(",")   FIELD("created"      , cast<i64>job.created)
            data.append(",")   FIELD("started"      , cast<i64>job.started)
            data.append(",")   FIELD("finished"     , cast<i64>job.finished)
            data.append(",")   FIELD("output_handle", cast<i32>job.output_handle)
            
            data.append("}")
            
            server.send(200, data.sliced(), e.who)
            return;
        } else  if path == "/api/list" {
            data: StringBuilder
            defer data.cleanup()
            
            data.append("{")
            data.append("\"jobs\":[")
            
            for @ptr session.job_system.jobs.sliced() {
                if nr != 0
                    data.append(",")
                
                data.append("{")
                data.append("\"id\":")
                data.append(it.id)
                data.append(",")
                data.append("\"name\":")
                data.append("\"")
                data.append(it.name)
                data.append("\"")
                data.append("}")
            }
            
            data.append("]}")
            
            server.send(200, data.sliced(), e.who)
            return;
        }
        
        real_path: StringBuilder
        defer real_path.cleanup()
        real_path.append("public")
        if(path[0] == '/') {
            if path == "/" {
                real_path.append("/index.html")
            } else {
                real_path.append(path)
            }
        } else {
            server.send(404, {}, e.who)
            return; // suspicious, path in header always begins with slash
        }

        // nocheckin IMPORTANT: 16-byte alignment BUG, if we add even (or odd?) number of local variables bug will go away.
        filesize: i64
        file := FileOpen(real_path, FILE_READ_ONLY, &filesize)
        if !file {
            server.send(404, {}, e.who)
            // log("send: Not Found")
        } else {
            defer FileClose(file)
            
            response: StringBuilder
            defer response.cleanup()
        
            response.reserve(300 + filesize)
            
            server.build_response(&response, 200, filesize)
            
            header_len := response.size()
            response.resize(header_len + filesize)
            
            err := FileRead(file, response.ptr + header_len, filesize)
            if !err {
                log("FileRead failed on ", real_path)
                server.send(404, {}, e.who)
                return;
            }
            
            server.send_built_response(&response, e.who)
            // log("send: ",real_path)
        }
    }
}

fn IsPathSanitized(path: char[]) -> bool {
    // Crude sanitization
    if path.ptr[0] != '/'
       return false
    for 1..path.len {
        chr := path[nr]
        if path.ptr[nr-1] == '.' && chr == '.'
            return false
        if chr >= '0' && chr <= '9'
            continue
        if chr >= 'A' && chr <= 'Z'
            continue
        if chr >= 'a' && chr <= 'z'
            continue
        if chr == '_' || chr == '-' || chr == '-' || chr == '.' || chr == '/'
            continue
        return false
    }
    return true
}